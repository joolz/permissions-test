package nl.ou.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import nl.ou.test.model.Foo;
import nl.ou.test.model.FooModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Foo service. Represents a row in the &quot;fubar_Foo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link nl.ou.test.model.FooModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FooImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FooImpl
 * @see nl.ou.test.model.Foo
 * @see nl.ou.test.model.FooModel
 * @generated
 */
public class FooModelImpl extends BaseModelImpl<Foo> implements FooModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a foo model instance should use the {@link nl.ou.test.model.Foo} interface instead.
     */
    public static final String TABLE_NAME = "fubar_Foo";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "fooId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "stringField", Types.VARCHAR },
            { "booleanField", Types.BOOLEAN },
            { "intField", Types.INTEGER },
            { "dateField", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table fubar_Foo (uuid_ VARCHAR(75) null,fooId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,stringField VARCHAR(75) null,booleanField BOOLEAN,intField INTEGER,dateField DATE null)";
    public static final String TABLE_SQL_DROP = "drop table fubar_Foo";
    public static final String ORDER_BY_JPQL = " ORDER BY foo.stringField ASC";
    public static final String ORDER_BY_SQL = " ORDER BY fubar_Foo.stringField ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.nl.ou.test.model.Foo"), true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.nl.ou.test.model.Foo"), true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.nl.ou.test.model.Foo"),
            true);
    public static long BOOLEANFIELD_COLUMN_BITMASK = 1L;
    public static long COMPANYID_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static long UUID_COLUMN_BITMASK = 8L;
    public static long STRINGFIELD_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.nl.ou.test.model.Foo"));
    private static ClassLoader _classLoader = Foo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Foo.class };
    private String _uuid;
    private String _originalUuid;
    private long _fooId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _stringField;
    private boolean _booleanField;
    private boolean _originalBooleanField;
    private boolean _setOriginalBooleanField;
    private int _intField;
    private Date _dateField;
    private long _columnBitmask;
    private Foo _escapedModel;

    public FooModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _fooId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFooId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _fooId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Foo.class;
    }

    @Override
    public String getModelClassName() {
        return Foo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("fooId", getFooId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("stringField", getStringField());
        attributes.put("booleanField", getBooleanField());
        attributes.put("intField", getIntField());
        attributes.put("dateField", getDateField());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long fooId = (Long) attributes.get("fooId");

        if (fooId != null) {
            setFooId(fooId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String stringField = (String) attributes.get("stringField");

        if (stringField != null) {
            setStringField(stringField);
        }

        Boolean booleanField = (Boolean) attributes.get("booleanField");

        if (booleanField != null) {
            setBooleanField(booleanField);
        }

        Integer intField = (Integer) attributes.get("intField");

        if (intField != null) {
            setIntField(intField);
        }

        Date dateField = (Date) attributes.get("dateField");

        if (dateField != null) {
            setDateField(dateField);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getFooId() {
        return _fooId;
    }

    @Override
    public void setFooId(long fooId) {
        _fooId = fooId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getStringField() {
        if (_stringField == null) {
            return StringPool.BLANK;
        } else {
            return _stringField;
        }
    }

    @Override
    public void setStringField(String stringField) {
        _columnBitmask = -1L;

        _stringField = stringField;
    }

    @Override
    public boolean getBooleanField() {
        return _booleanField;
    }

    @Override
    public boolean isBooleanField() {
        return _booleanField;
    }

    @Override
    public void setBooleanField(boolean booleanField) {
        _columnBitmask |= BOOLEANFIELD_COLUMN_BITMASK;

        if (!_setOriginalBooleanField) {
            _setOriginalBooleanField = true;

            _originalBooleanField = _booleanField;
        }

        _booleanField = booleanField;
    }

    public boolean getOriginalBooleanField() {
        return _originalBooleanField;
    }

    @Override
    public int getIntField() {
        return _intField;
    }

    @Override
    public void setIntField(int intField) {
        _intField = intField;
    }

    @Override
    public Date getDateField() {
        return _dateField;
    }

    @Override
    public void setDateField(Date dateField) {
        _dateField = dateField;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Foo.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Foo.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Foo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Foo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FooImpl fooImpl = new FooImpl();

        fooImpl.setUuid(getUuid());
        fooImpl.setFooId(getFooId());
        fooImpl.setGroupId(getGroupId());
        fooImpl.setCompanyId(getCompanyId());
        fooImpl.setUserId(getUserId());
        fooImpl.setUserName(getUserName());
        fooImpl.setCreateDate(getCreateDate());
        fooImpl.setModifiedDate(getModifiedDate());
        fooImpl.setStringField(getStringField());
        fooImpl.setBooleanField(getBooleanField());
        fooImpl.setIntField(getIntField());
        fooImpl.setDateField(getDateField());

        fooImpl.resetOriginalValues();

        return fooImpl;
    }

    @Override
    public int compareTo(Foo foo) {
        int value = 0;

        value = getStringField().compareTo(foo.getStringField());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Foo)) {
            return false;
        }

        Foo foo = (Foo) obj;

        long primaryKey = foo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FooModelImpl fooModelImpl = this;

        fooModelImpl._originalUuid = fooModelImpl._uuid;

        fooModelImpl._originalGroupId = fooModelImpl._groupId;

        fooModelImpl._setOriginalGroupId = false;

        fooModelImpl._originalCompanyId = fooModelImpl._companyId;

        fooModelImpl._setOriginalCompanyId = false;

        fooModelImpl._originalBooleanField = fooModelImpl._booleanField;

        fooModelImpl._setOriginalBooleanField = false;

        fooModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Foo> toCacheModel() {
        FooCacheModel fooCacheModel = new FooCacheModel();

        fooCacheModel.uuid = getUuid();

        String uuid = fooCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            fooCacheModel.uuid = null;
        }

        fooCacheModel.fooId = getFooId();

        fooCacheModel.groupId = getGroupId();

        fooCacheModel.companyId = getCompanyId();

        fooCacheModel.userId = getUserId();

        fooCacheModel.userName = getUserName();

        String userName = fooCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            fooCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            fooCacheModel.createDate = createDate.getTime();
        } else {
            fooCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            fooCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            fooCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        fooCacheModel.stringField = getStringField();

        String stringField = fooCacheModel.stringField;

        if ((stringField != null) && (stringField.length() == 0)) {
            fooCacheModel.stringField = null;
        }

        fooCacheModel.booleanField = getBooleanField();

        fooCacheModel.intField = getIntField();

        Date dateField = getDateField();

        if (dateField != null) {
            fooCacheModel.dateField = dateField.getTime();
        } else {
            fooCacheModel.dateField = Long.MIN_VALUE;
        }

        return fooCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", fooId=");
        sb.append(getFooId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", stringField=");
        sb.append(getStringField());
        sb.append(", booleanField=");
        sb.append(getBooleanField());
        sb.append(", intField=");
        sb.append(getIntField());
        sb.append(", dateField=");
        sb.append(getDateField());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("nl.ou.test.model.Foo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fooId</column-name><column-value><![CDATA[");
        sb.append(getFooId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stringField</column-name><column-value><![CDATA[");
        sb.append(getStringField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>booleanField</column-name><column-value><![CDATA[");
        sb.append(getBooleanField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>intField</column-name><column-value><![CDATA[");
        sb.append(getIntField());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateField</column-name><column-value><![CDATA[");
        sb.append(getDateField());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
